{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ocean/Code/ocean/Kodprov/kodprov_frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ocean/Code/ocean/Kodprov/kodprov_frontend/src/components/Auth.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport Persons from '../pages/Persons';\nimport Login from '../pages/Login';\n/**\n * This is where the \"Router\" which handles navigation is implemented and all the paths initiated.\n * A header and a footer is always present. Anyone can access route but when a user tries to access a private route page\n * they should be redirected to login.\n * @returns {*}\n * @constructor\n */\n\nfunction Auth() {\n  return React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/home\",\n    component: Home,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/login\",\n    component: Login,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(PrivateRoute, {\n    path: \"/persons\",\n    component: Persons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })));\n}\n/**\n * Set authenticated to true or false. Stores currently logged in username.\n *\n * @type {{user: string, isAuthenticated: boolean, authenticate(*=): void, signout(*=): void, getItems(*)}}\n */\n\n\nexport const auth = {\n  user: \"\",\n  isAuthenticated: false,\n\n  authenticate(cb) {\n    this.isAuthenticated = true;\n    cb();\n  },\n\n  signout(cb) {\n    this.user = \"\";\n    this.isAuthenticated = false;\n    cb();\n  },\n\n  getItems(cb) {}\n\n};\n/**\n * Create a PrivateRoute with same API as Route\n * Render a Route and pass all props to it\n * Render component prop if user is authenticated, otherwise redirects\n * @param Component\n * @param rest\n * @constructor\n */\n\nconst PrivateRoute = (_ref) => {\n  let Component = _ref.component,\n      rest = _objectWithoutProperties(_ref, [\"component\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: props => auth.isAuthenticated ? React.createElement(Component, Object.assign({}, props, {\n      auth: auth.isAuthenticated,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })) : //TODO should check something else than auth={auth.isAuthenticated} ?\n    React.createElement(Redirect, {\n      to: {\n        pathname: '/login',\n        state: {\n          from: props.location\n        }\n        /* save a state key, so that we can redirect the user back to where they were before login */\n\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/Users/ocean/Code/ocean/Kodprov/kodprov_frontend/src/components/Auth.js"],"names":["React","BrowserRouter","Router","Route","Redirect","Persons","Login","Auth","Home","auth","user","isAuthenticated","authenticate","cb","signout","getItems","PrivateRoute","Component","component","rest","props","pathname","state","from","location"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,aAAa,IAAIC,MADrB,EAEIC,KAFJ,EAGIC,QAHJ,QAIO,kBAJP;AAKA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAGA;;;;;;;;AAOA,SAASC,IAAT,GAAgB;AACZ,SACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,SAAS,EAAEC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,SAAS,EAAEF,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,UAAnB;AAA8B,IAAA,SAAS,EAAED,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ,CADJ;AASH;AAED;;;;;;;AAKA,OAAO,MAAMI,IAAI,GAAG;AAChBC,EAAAA,IAAI,EAAE,EADU;AAEhBC,EAAAA,eAAe,EAAE,KAFD;;AAGhBC,EAAAA,YAAY,CAACC,EAAD,EAAK;AACb,SAAKF,eAAL,GAAuB,IAAvB;AACAE,IAAAA,EAAE;AACL,GANe;;AAOhBC,EAAAA,OAAO,CAACD,EAAD,EAAK;AACR,SAAKH,IAAL,GAAY,EAAZ;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACAE,IAAAA,EAAE;AACL,GAXe;;AAYhBE,EAAAA,QAAQ,CAACF,EAAD,EAAK,CAEZ;;AAde,CAAb;AAiBP;;;;;;;;;AAQA,MAAMG,YAAY,GAAG;AAAA,MAAcC,SAAd,QAAGC,SAAH;AAAA,MAA4BC,IAA5B;;AAAA,SACjB,oBAAC,KAAD,oBAAWA,IAAX;AAAiB,IAAA,MAAM,EAAGC,KAAD,IACrBX,IAAI,CAACE,eAAL,GACQ,oBAAC,SAAD,oBAAeS,KAAf;AAAsB,MAAA,IAAI,EAAEX,IAAI,CAACE,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADR,GAC8D;AACtD,wBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AACdU,QAAAA,QAAQ,EAAE,QADI;AAEdC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd;AAAyB;;AAFlB,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADiB;AAAA,CAArB;;AAWA,eAAejB,IAAf","sourcesContent":["import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\nimport Persons from '../pages/Persons';\nimport Login from '../pages/Login';\n\n\n/**\n * This is where the \"Router\" which handles navigation is implemented and all the paths initiated.\n * A header and a footer is always present. Anyone can access route but when a user tries to access a private route page\n * they should be redirected to login.\n * @returns {*}\n * @constructor\n */\nfunction Auth() {\n    return (\n        <Router>\n            <div>\n                <Route path=\"/home\" component={Home}/>\n                <Route path=\"/login\" component={Login}/>\n                <PrivateRoute path='/persons' component={Persons} />\n            </div>\n        </Router>\n    )\n}\n\n/**\n * Set authenticated to true or false. Stores currently logged in username.\n *\n * @type {{user: string, isAuthenticated: boolean, authenticate(*=): void, signout(*=): void, getItems(*)}}\n */\nexport const auth = {\n    user: \"\",\n    isAuthenticated: false,\n    authenticate(cb) {\n        this.isAuthenticated = true;\n        cb();\n    },\n    signout(cb) {\n        this.user = \"\"\n        this.isAuthenticated = false\n        cb();\n    },\n    getItems(cb) {\n\n    }\n}\n\n/**\n * Create a PrivateRoute with same API as Route\n * Render a Route and pass all props to it\n * Render component prop if user is authenticated, otherwise redirects\n * @param Component\n * @param rest\n * @constructor\n */\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={(props) => (\n        auth.isAuthenticated\n            ? ( <Component {...props} auth={auth.isAuthenticated}/> ) //TODO should check something else than auth={auth.isAuthenticated} ?\n            : ( <Redirect to={{\n                pathname: '/login',\n                state: { from: props.location } /* save a state key, so that we can redirect the user back to where they were before login */\n            }} /> )\n    )} />\n)\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}