{"ast":null,"code":"var _jsxFileName = \"/Users/ocean/Code/ocean/Kodprov/kodprov_frontend/src/pages/Login.js\";\nimport React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { auth } from '../components/Auth';\nimport { server } from '../config';\n/**\n * Presents the user with a log in form taking username and password. The given values is then posted to the server as a\n * form using fetch.\n */\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirectToReferrer: false,\n      username: \"\",\n      password: \"\",\n      usernameError: \"\",\n      passwordError: \"\",\n      genericErrorMessage: \"*required\"\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.login = this.login.bind(this);\n    this.errors = this.errors.bind(this);\n    this.mockLogin = this.mockLogin.bind(this);\n  }\n  /**\n   * Checks if any of the input fields are empty and in that case sets the corresponding error state variable to an\n   * error message.\n   * @returns {boolean}\n   */\n\n\n  errors() {\n    let error = false;\n\n    if (this.state.username === null || this.state.username === \"\") {\n      this.setState(() => ({\n        usernameError: this.state.genericErrorMessage\n      }));\n      error = true;\n    }\n\n    if (this.state.password === null || this.state.password === \"\") {\n      this.setState(() => ({\n        passwordError: this.state.genericErrorMessage\n      }));\n      error = true;\n    }\n\n    return error;\n  }\n  /**\n   * Checks for input errors and then posts the login form to the server. Checks if the user has the right authority.\n   * If not, the user is not allowed to log in.\n   * On success sets authenticated to true and adds username in const auth in file\n   * Auth. Displays alert box with error message on fail.\n   * @param event\n   */\n\n\n  login(event) {\n    event.preventDefault();\n    if (this.errors()) return;\n    const data = new FormData(event.target);\n    const url = server;\n    fetch(url + '/perform_login', {\n      credentials: 'include',\n      method: 'POST',\n      body: data\n    }).then(response => {\n      console.log(response);\n      if (!response.ok && response.status === 401) throw new Error(\"Wrong username or password\");else if (!response.ok) throw new Error(\"Oops! Something went wrong. Please try again in a few minutes.\");else return response.json();\n    }).then(data => {\n      auth.authenticate(() => {\n        data.roles[0].name === \"recruit\" ? this.setState({\n          redirectToReferrer: true\n        }, () => {\n          auth.user = data.username;\n          this.props.history.replace('/applications');\n        }) : alert(\"You are not authorized to use this web site. \\n Required authority: recruit \\n Your authority: \" + data.roles[0].name);\n      });\n    }).catch(error => {\n      this.mockLogin();\n    });\n  }\n\n  /**\n   * Handles input from the input fields and updates their corresponding state variables.\n   * @param event\n   */\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n      [name + \"Error\"]: null\n    });\n  }\n\n  mockLogin() {\n    console.log(\"dasdasda\");\n    this.setState({\n      redirectToReferrer: true\n    }, () => {\n      auth.user = \"username\";\n      this.props.history.replace('/Persons');\n    });\n  }\n\n  render() {\n    const _ref = this.props.location.state || {\n      from: {\n        pathname: '/'\n      }\n    },\n          from = _ref.from;\n\n    const redirectToReferrer = this.state.redirectToReferrer;\n\n    if (redirectToReferrer === true) {\n      return React.createElement(Redirect, {\n        to: from,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Username:\", React.createElement(\"input\", {\n      name: \"username\",\n      type: \"text\",\n      value: this.state.username,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), !!this.state.usernameError && React.createElement(\"p\", {\n      style: {\n        color: 'red',\n        float: \"right\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.state.usernameError)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Password:\", React.createElement(\"input\", {\n      name: \"password\",\n      type: \"password\",\n      value: this.state.password,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), !!this.state.passwordError && React.createElement(\"p\", {\n      style: {\n        color: 'red',\n        float: \"right\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, this.state.passwordError)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/ocean/Code/ocean/Kodprov/kodprov_frontend/src/pages/Login.js"],"names":["React","Component","Redirect","auth","server","Login","constructor","props","state","redirectToReferrer","username","password","usernameError","passwordError","genericErrorMessage","handleInputChange","bind","login","errors","mockLogin","error","setState","event","preventDefault","data","FormData","target","url","fetch","credentials","method","body","then","response","console","log","ok","status","Error","json","authenticate","roles","name","user","history","replace","alert","catch","value","render","location","from","pathname","color","float"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {\n    Redirect,\n} from \"react-router-dom\";\nimport {auth} from '../components/Auth';\nimport {server} from '../config';\n\n/**\n * Presents the user with a log in form taking username and password. The given values is then posted to the server as a\n * form using fetch.\n */\nclass Login extends Component{\n\n    state = {\n        redirectToReferrer: false,\n        username: \"\",\n        password: \"\",\n        usernameError: \"\",\n        passwordError: \"\",\n        genericErrorMessage: \"*required\"\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.login = this.login.bind(this);\n        this.errors = this.errors.bind(this);\n        this.mockLogin = this.mockLogin.bind(this);\n    }\n\n    /**\n     * Checks if any of the input fields are empty and in that case sets the corresponding error state variable to an\n     * error message.\n     * @returns {boolean}\n     */\n    errors(){\n        let error = false;\n        if (this.state.username === null || this.state.username === \"\") {\n            this.setState(() => ({ usernameError: this.state.genericErrorMessage}));\n            error = true;\n        }\n        if (this.state.password === null || this.state.password === \"\") {\n            this.setState(() => ({ passwordError: this.state.genericErrorMessage}));\n            error = true;\n        }\n        return error;\n\n    }\n\n    /**\n     * Checks for input errors and then posts the login form to the server. Checks if the user has the right authority.\n     * If not, the user is not allowed to log in.\n     * On success sets authenticated to true and adds username in const auth in file\n     * Auth. Displays alert box with error message on fail.\n     * @param event\n     */\n    login(event){\n        event.preventDefault();\n        if(this.errors())\n            return;\n\n        const data = new FormData(event.target);\n        const url = server;\n\n        fetch(url + '/perform_login', {\n            credentials: 'include',\n            method: 'POST',\n            body: data,\n        })\n            .then((response) => {\n                console.log(response)\n                if(!response.ok && response.status === 401) throw new Error(\"Wrong username or password\");\n                else if(!response.ok) throw new Error(\"Oops! Something went wrong. Please try again in a few minutes.\");\n                else return response.json();\n            })\n            .then((data) => {\n                auth.authenticate(() => {\n                    data.roles[0].name === \"recruit\" ?\n                    this.setState({ redirectToReferrer: true }, ()=>{auth.user = data.username; this.props.history.replace('/applications')})\n                        :\n                        alert(\"You are not authorized to use this web site. \\n Required authority: recruit \\n Your authority: \" + data.roles[0].name);\n                });\n            })\n            .catch((error) => {\n                this.mockLogin();\n            });\n    };\n\n    /**\n     * Handles input from the input fields and updates their corresponding state variables.\n     * @param event\n     */\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n\n        this.setState({\n            [name]: value,\n            [name + \"Error\"]: null,\n\n        });\n    }\n\n    mockLogin(){\n        console.log(\"dasdasda\")\n        this.setState({ redirectToReferrer: true }, ()=>{auth.user = \"username\"; this.props.history.replace('/Persons')})\n    }\n\n    render(){\n\n        const { from } = this.props.location.state || { from: { pathname: '/' } }\n        const { redirectToReferrer } = this.state\n\n        if (redirectToReferrer === true) {\n            return <Redirect to={from} />\n        }\n\n        return(\n            <div>\n                <form onSubmit={this.login}>\n                    <label>\n                        Username:\n                        <input\n                            name=\"username\"\n                            type=\"text\"\n                            value={this.state.username}\n                            onChange={this.handleInputChange}/>\n                        {!!this.state.usernameError && (<p style={{color: 'red', float: \"right\"}}>{this.state.usernameError}</p>)}\n                    </label>\n                    <br />\n                    <label>\n                        Password:\n                        <input\n                            name=\"password\"\n                            type=\"password\"\n                            value={this.state.password}\n                            onChange={this.handleInputChange}/>\n                        {!!this.state.passwordError && (<p style={{color: 'red', float: \"right\"}}>{this.state.passwordError}</p>)}\n                    </label>\n                    <br/>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n                <br/>\n            </div>\n        )\n    }\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}